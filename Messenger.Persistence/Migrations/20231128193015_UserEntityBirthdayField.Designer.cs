// <auto-generated />
using System;
using MessengerX.Persistence.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Messenger.Persistence.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20231128193015_UserEntityBirthdayField")]
    partial class UserEntityBirthdayField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("AccountSequence");

            modelBuilder.Entity("MessengerX.Domain.Entities.Accounts.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [AccountSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.ToTable("Accounts");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("MessengerX.Domain.Entities.Admins.Admin", b =>
                {
                    b.HasBaseType("MessengerX.Domain.Entities.Accounts.Account");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1000,
                            CreatedAt = new DateTime(2023, 11, 28, 22, 30, 15, 391, DateTimeKind.Local).AddTicks(2258),
                            Email = "admin@admin.com",
                            Login = "Admin",
                            PasswordHash = new byte[] { 182, 211, 225, 246, 103, 99, 196, 180, 240, 0, 175, 234, 28, 51, 142, 73, 74, 211, 97, 105, 202, 181, 47, 209, 159, 151, 66, 8, 173, 55, 225, 243, 67, 34, 127, 162, 168, 10, 114, 27, 4, 88, 66, 15, 242, 205, 179, 121, 198, 149, 204, 106, 210, 75, 243, 165, 198, 92, 129, 166, 108, 206, 236, 64 },
                            PasswordSalt = new byte[] { 96, 99, 242, 167, 79, 92, 166, 41, 217, 80, 39, 194, 62, 243, 113, 249, 217, 200, 35, 43, 143, 237, 231, 48, 56, 117, 25, 196, 175, 231, 166, 228, 82, 103, 160, 152, 145, 159, 35, 244, 97, 150, 169, 12, 189, 149, 121, 164, 33, 15, 108, 34, 137, 78, 244, 63, 79, 21, 78, 184, 60, 242, 233, 173, 4, 158, 1, 192, 212, 2, 92, 39, 30, 154, 141, 220, 88, 254, 112, 204, 19, 95, 35, 130, 33, 107, 178, 107, 165, 221, 209, 12, 6, 222, 223, 181, 164, 164, 205, 77, 48, 0, 45, 99, 11, 118, 41, 148, 122, 195, 127, 56, 252, 132, 112, 59, 70, 218, 97, 135, 111, 112, 148, 200, 129, 59, 229, 33 },
                            Role = "Admin",
                            UpdatedAt = new DateTime(2023, 11, 28, 22, 30, 15, 391, DateTimeKind.Local).AddTicks(2324),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("MessengerX.Domain.Entities.Users.User", b =>
                {
                    b.HasBaseType("MessengerX.Domain.Entities.Accounts.Account");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
